AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Front end for YouTube Video to MP3 Converter

Parameters:
  VideoSourceCacheTableName:
    Type: String
  VideoSourceCacheTableArn:
    Type: String
  UserConnectionsTableName:
    Type: String
  UserConnectionsTableArn:
    Type: String
  ConversionWorkflow:
    Type: String
  CognitoDomainPrefix:
    Type: String

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: yt2mp3-users
      UsernameAttributes: [email]
      AutoVerifiedAttributes: [email]
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true

  ManagedLoginDefaultBranding:
    Type: AWS::Cognito::ManagedLoginBranding
    Properties:
      UserPoolId: !Ref UserPool
      ClientId: !Ref UserPoolClient
      UseCognitoProvidedValues: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: web-spa
      GenerateSecret: false
      AllowedOAuthFlows: [code]
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: [openid, email, profile]
      CallbackURLs:
        - !Sub "https://${FrontendApi}.execute-api.${AWS::Region}.amazonaws.com/staging/auth/callback"
      LogoutURLs:
        - !Sub "https://${FrontendApi}.execute-api.${AWS::Region}.amazonaws.com/staging/auth/logout"
      SupportedIdentityProviders: [COGNITO]
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Ref CognitoDomainPrefix
      ManagedLoginVersion: 2

  FrontendApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: staging
      EndpointConfiguration: REGIONAL
      Name: YTToMp3ConverterApi
      Cors:
        AllowMethods: "'GET,POST'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuth:
            UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
            Identity:
              Header: Authorization
        DefaultAuthorizer: CognitoAuth

  SinglePageAppLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/frontend
      Handler: dist/serveUI.handler
      Runtime: nodejs22.x
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          COGNITO_HOSTED_UI_DOMAIN: !Sub >
            https://${CognitoDomainPrefix}.auth.${AWS::Region}.amazoncognito.com
          COGNITO_CLIENT_ID: !Sub "/${AWS::StackName}/oauthClientId"
      Events:
        Root:
          Type: Api
          Properties:
            RestApiId: !Ref FrontendApi
            Path: /
            Method: GET
            Auth: { Authorizer: NONE }
        AuthCallback:
          Type: Api
          Properties:
            RestApiId: !Ref FrontendApi
            Path: /auth/callback
            Method: GET
            Auth: { Authorizer: NONE }
        AuthLogout:
          Type: Api
          Properties:
            RestApiId: !Ref FrontendApi
            Path: /auth/logout
            Method: GET
            Auth: { Authorizer: NONE }
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: ssm:GetParameter
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/oauthClientId"

  OAuthClientIdParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/oauthClientId"
      Type: String
      Value: !Ref UserPoolClient

  QueryStatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/queryStatus/dist/
      Handler: queryStatus.handler
      Runtime: nodejs22.x
      MemorySize: 128
      Timeout: 10
      Events:
        Status:
          Type: Api
          Properties:
            RestApiId: !Ref FrontendApi
            Path: /status/{clientId}/{videoId}
            Method: GET
      Policies:
        - AWSLambdaBasicExecutionRole

  PrepareConversionLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/prepareConversion/dist/
      Handler: prepareConversion.handler
      Runtime: nodejs22.x
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          VIDEO_SOURCES_TABLE: !Ref VideoSourceCacheTableName
          USERS_TABLE: !Ref UserConnectionsTableName
          CONVERSION_SM_ARN: !Ref ConversionWorkflow
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: !Ref ConversionWorkflow
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !Ref VideoSourceCacheTableArn
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
              Resource: !Ref UserConnectionsTableArn
      Events:
        Convert:
          Type: Api
          Properties:
            RestApiId: !Ref FrontendApi
            Path: /convert
            Method: POST

Outputs:
  ApiBaseUrl:
    Description: "API Gateway base (origin) for this REST API"
    Value: !Sub "https://${FrontendApi}.execute-api.${AWS::Region}.amazonaws.com"
  AppUrl:
    Description: "SPA entry URL"
    Value: !Sub "https://${FrontendApi}.execute-api.${AWS::Region}.amazonaws.com/staging"
